#
# Provides support functions and initializations for test scripts
#
# shellcheck shell=sh

if [ -z "$script_dir" ]; then
    echo >&2 "ERROR: variable 'script_dir' not set"
fi
if [ -z "$script_name" ]; then
    echo >&2 "ERROR: variable 'script_name' not set"
fi


PRJ_DIR="$(dirname "$script_dir")"
TGT_DIR="$PRJ_DIR/target"

REL_PA_EXE="$TGT_DIR/release/parseargs"
DBG_PA_EXE="$TGT_DIR/debug/parseargs"

if [ -e "$REL_PA_EXE" ] && [ -e "$DBG_PA_EXE" ]; then
    if [ -n "$(find "$REL_PA_EXE"  -newer "$DBG_PA_EXE" )" ]; then
        PATH_PREFIX="$TGT_DIR/release"
    else
        PATH_PREFIX="$TGT_DIR/debug"
    fi
elif [ -e "$DBG_PA_EXE" ]; then
    PATH_PREFIX="$TGT_DIR/debug"
elif [ -e "$REL_PA_EXE" ]; then
    PATH_PREFIX="$TGT_DIR/release"
else
    echo >&2 "ERROR: Parseargs executable not found - run build"
    exit 1
fi

PATH="$PATH_PREFIX:$PATH"
export PATH

if ! command -v parseargs >/dev/null 2>&1; then
    echo >&2 "ERROR: Parseargs executable not found"
    exit 1
fi


error_cnt=0

start_test()
{
    echo "Test-Script $script_name"
    echo "Testing $(command -v parseargs)"
}

end_test()
{
    rc=0
    if [ $error_cnt -eq 0 ]; then
        printf '\033[01;32mALL TESTS OK\033[0m\n'
    else
        printf >&2 '\033[01;31mTEST FAILURES\033[0m\n'
        rc=1
    fi
    echo "-------------------------------------------------------------------------------"
    return $rc
}



ok()
{
    printf '\033[01;32mOK\033[0m:   %s\n' "$*"
}

failed()
{
    printf >&2 '\033[01;31mFAIL\033[0m: %s\n' "$*"
    error_cnt=$((error_cnt+1))
}

test_pa()
{
    expect="$1"
    shift
    args="$(printf "'%s' " "$@")"
    (
    if eval "$(parseargs "$@")"; then
        if eval "$expect"; then
            exit 0
        else
            exit 1
        fi
    else
        echo >&2 "parseargs exit code: $?"
    fi
    )
    rc=$?
    if [ "$rc" = "0" ]; then
        ok "parseargs $args"
    else
        failed "parseargs $args"
    fi

    return $rc
}

test_pa_errmsg()
{
    expected_rc="$1"
    msg_re="$2"
    shift 2
    args="$(printf "'%s' " "$@")"

    #
    # Little bit complicated here. Error message on STDERR could be created by
    # parseargs itself or by eval while it parses parseargs output (e.g.
    # function does not exist).  To get all output of the two sub-shells we
    # introduce an additional file discriptor 3.
    #
    message="$(exec 3>&1;eval "$(parseargs "$@" 2>&3)" 2>&3)"
    actual_rc=$?
    if [ "$expected_rc" != "$actual_rc" ]; then
        failed "parseargs $args - exit code expected: $expected_rc - actual: $actual_rc"
    fi


    if echo "$message" | grep -q "$msg_re" ; then
        ok "parseargs $args  - Exit-Code OK - Output matches >>$msg_re<<"
        return 0
    else
        failed "parseargs $args - Exit-Code OK - Invalid Output: >>$message<<"
        return 1
    fi
}


test_pa_code()
{
    code_re="$1"
    shift
    args="$(printf "'%s' " "$@")"

    code="$(parseargs "$@" 2>/dev/null)"
    if echo "$code" | grep -q "$code_re" ; then
        ok "parseargs $args  - Output matches >>$code_re<<"
        return 0
    else
        failed "parseargs $args - Invalid Output: >>$code<<"
        return 1
    fi
}


#
# Check whether shell supports function local variables.
# Check by testing for typeset or local command.
# If PARSEARGS_SHELL = 'sh' always return false
#
shell_supports_local_vars()
{
    if [ -z "$PARSEARGS_SHELL" ] || [ "$PARSEARGS_SHELL" = "sh" ]; then
        return 1
    fi
    # Typeset & local are undefined in pure sh. Also 'fake_var' is not used.
    # shellcheck disable=SC3043,SC3044,SC2034
    typeset fake_var >/dev/null 2>&1 || local fake_var >/dev/null 2>&1
}

#
# Whether shell supports arrays.
# Check by testing for typeset -a command.
# If PARSEARGS_SHELL = 'sh' or 'dash' always return false
#
shell_supports_arrays()
{
    if [ -z "$PARSEARGS_SHELL" ] || [ "$PARSEARGS_SHELL" = "dash" ] || [ "$PARSEARGS_SHELL" = "sh" ]; then
        return 1
    fi
    # Typeset is undefined in pure sh. Also 'fake_array' is not used.
    # shellcheck disable=SC3044,SC2034
    typeset -a fake_array >/dev/null 2>&1
}


#    vim:ft=sh
